{"version":3,"sources":["InfiniteList.js","App.js","serviceWorker.js","index.js"],"names":["InfiniteList","props","onScrollHandle","event","list","document","getElementById","window","scrollY","innerHeight","clientHeight","offsetTop","console","log","getData","state","img","setState","addEventListener","this","removeEventListener","fetch","then","response","json","res","length","JSON","stringify","parse","substring","id","map","i","style","backgroundImage","url","key","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8MAoDeA,E,YAjDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,eAAiB,SAAAC,GACf,IAAMC,EAAOC,SAASC,eAAe,QAEjCC,OAAOC,QAAUD,OAAOE,cAAgBL,EAAKM,aAAeN,EAAKO,YACjEC,QAAQC,IAAI,gBACZ,EAAKC,YAlBT,EAAKC,MAAM,CAACC,IAAI,GAAGC,SAAS,IAE5B,EAAKH,UAJY,E,iFASjBP,OAAOW,iBAAiB,SAAUC,KAAKjB,gBAAgB,K,6CAGvDK,OAAOa,oBAAoB,SAAUD,KAAKjB,kB,gCAYhC,IAAD,OACLmB,MAAM,kEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACtBF,MAAK,SAAAG,GACF,IAAIT,EAAM,EAAKD,MAAMC,IACN,GAAZA,EAAIU,OACH,EAAKT,SAAS,CAACD,IAAIS,KAEnBA,EAAME,KAAKC,UAAUH,GACrBT,EAAMW,KAAKC,UAAUZ,GACrBA,EAAMW,KAAKE,MAAMb,EAAIc,UAAU,EAAEd,EAAIU,OAAO,GAAG,IAAKD,EAAIK,UAAU,EAAEL,EAAIC,SACxE,EAAKT,SAAS,CAACD,c,+BAMjC,OACE,wBAAIe,GAAG,QACJZ,KAAKJ,MAAMC,IAAIgB,KAAI,SAAChB,EAAKiB,GAAN,OAAY,wBAAIC,MAAO,CAACC,gBAAgB,OAAD,OAASnB,EAAIoB,IAAb,MAAsBC,IAAKJ,Y,GA5CjEK,IAAMC,WCqBlBC,E,YAlBb,WAAYvC,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAM,CAACA,MAAM,GAAGE,SAAS,IAFb,E,sEAKnB,OACE,6BACE,yBAAKc,GAAG,YACN,yBAAKU,UAAU,WAAf,qBAEF,yBAAKA,UAAU,OACb,kBAAC,EAAD,Y,GAZUH,IAAMC,WCQJG,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1C,SAASC,eAAe,SD2H3C,kBAAmB0C,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.de953f89.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nclass InfiniteList extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={img:[],setState:[]};\r\n    //初始圖片\r\n    this.getData();\r\n  }\r\n\r\n  //將事件加入window中\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.onScrollHandle, true);\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onScrollHandle);\r\n  }\r\n\r\n  onScrollHandle = event => {\r\n    const list = document.getElementById('list');\r\n    //判斷是否至底部\r\n    if (window.scrollY + window.innerHeight === list.clientHeight + list.offsetTop) {\r\n        console.log(\"底部\");\r\n        this.getData();\r\n    }\r\n  }\r\n\r\n    getData(){\r\n        fetch('https://api.thecatapi.com/v1/images/search?limit=10&order=Desc')\r\n        .then(response => response.json())\r\n            .then(res => {\r\n                let img = this.state.img;\r\n                if(img.length==0){\r\n                    this.setState({img:res});\r\n                }else{\r\n                    res = JSON.stringify(res);\r\n                    img = JSON.stringify(img);\r\n                    img = JSON.parse(img.substring(0,img.length-1)+\",\"+ res.substring(1,res.length));\r\n                    this.setState({img});\r\n                }\r\n            });\r\n    }\r\n\r\n  render() {\r\n  return (\r\n    <ul id=\"list\">\r\n      {this.state.img.map((img, i) => <li style={{backgroundImage: `url(${img.url})`}} key={i}/>) }\r\n    </ul>\r\n  )\r\n}\r\n}\r\n\r\nexport default InfiniteList;","import React, { useState } from 'react';\nimport InfiniteList from './InfiniteList';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={state:[],setState:[]};\n  }\n  render() {\n  return (\n    <div>\n      <div id=\"topBlock\">\n        <div className=\"topText\">Cute Cat Photo!!</div>\n      </div>\n      <div className='App'>\n        <InfiniteList />\n      </div>\n    </div>\n  )\n}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}