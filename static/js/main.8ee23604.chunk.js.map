{"version":3,"sources":["InfiniteList.js","App.js","serviceWorker.js","index.js"],"names":["InfiniteList","props","onScrollHandle","event","scrollY","document","documentElement","scrollTop","parseInt","window","innerHeight","body","offsetHeight","console","log","getData","state","img","setState","addEventListener","this","removeEventListener","fetch","then","response","json","res","length","JSON","stringify","parse","substring","id","map","i","style","backgroundImage","url","key","React","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+rBAyDeA,E,wCArDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,eAAiB,SAAAC,GACf,IAAMC,EAAUC,SAASC,gBAAgBC,UACrCC,SAASC,OAAOC,YAAcN,GAAW,GAAKC,SAASM,KAAKC,eAC9DC,QAAQC,IAAI,UACZ,EAAKC,YAtBP,EAAKC,MAAM,CACTC,IAAK,GACLC,SAAU,IAIZ,EAAKH,UARY,E,gEAYjBN,OAAOU,iBAAiB,SAAUC,KAAKlB,gBAAgB,K,6CAIvDO,OAAOY,oBAAoB,SAAUD,KAAKlB,kB,gCAYhC,IAAD,OACLoB,MAAM,kEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACtBF,MAAK,SAAAG,GACF,IAAIT,EAAM,EAAKD,MAAMC,IACH,IAAfA,EAAIU,OACH,EAAKT,SAAS,CAACD,IAAIS,KAEnBA,EAAME,KAAKC,UAAUH,GACrBT,EAAMW,KAAKC,UAAUZ,GACrBA,EAAMW,KAAKE,MAAMb,EAAIc,UAAU,EAAGd,EAAIU,OAAO,GAAK,IAAMD,EAAIK,UAAU,EAAGL,EAAIC,SAC7E,EAAKT,SAAS,CAACD,c,+BAMjC,OACE,wBAAIe,GAAK,QACNZ,KAAKJ,MAAMC,IAAIgB,KAAI,SAAChB,EAAKiB,GAAN,OAAY,wBAAIC,MAAO,CAACC,gBAAgB,OAAD,OAASnB,EAAIoB,IAAb,MAAsBC,IAAKJ,Y,GAhDjEK,IAAMC,W,scCoBlBC,E,wCAlBb,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IACDe,MAAM,CAACA,MAAM,GAAGE,SAAS,IAFb,E,qDAKnB,OACE,yBAAKwB,UAAY,QACf,yBAAKA,UAAY,YACd,eAEH,yBAAKA,UAAY,aACf,kBAAC,EAAD,Y,GAZUH,IAAMC,WCQJG,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAAS4C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.8ee23604.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfiniteList.css';\r\n\r\nclass InfiniteList extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      img: [],\r\n      setState: []\r\n    };\r\n\r\n    //初始貓咪圖片\r\n    this.getData();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.onScrollHandle, true);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onScrollHandle);\r\n  }\r\n\r\n   //判斷是否至底部\r\n  onScrollHandle = event => {\r\n    const scrollY = document.documentElement.scrollTop;\r\n    if (parseInt(window.innerHeight + scrollY) + 5 >= document.body.offsetHeight) {\r\n      console.log(\"bottom\");\r\n      this.getData();\r\n    }\r\n  }\r\n\r\n    getData(){\r\n        fetch('https://api.thecatapi.com/v1/images/search?limit=10&order=Desc')\r\n        .then(response => response.json())\r\n            .then(res => {\r\n                let img = this.state.img;\r\n                if(img.length === 0) {\r\n                    this.setState({img:res});\r\n                } else {\r\n                    res = JSON.stringify(res);\r\n                    img = JSON.stringify(img);\r\n                    img = JSON.parse(img.substring(0, img.length-1) + \",\" + res.substring(1, res.length));\r\n                    this.setState({img});\r\n                }\r\n            });\r\n    }\r\n\r\n  render() {\r\n  return (\r\n    <ul id = \"list\">\r\n      {this.state.img.map((img, i) => <li style={{backgroundImage: `url(${img.url})`}} key={i}/>) }\r\n    </ul>\r\n  )\r\n}\r\n}\r\n\r\nexport default InfiniteList;","import React from 'react';\r\nimport InfiniteList from './InfiniteList';\r\n\r\n\r\nclass App extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={state:[],setState:[]};\r\n  }\r\n  render() {\r\n  return (\r\n    <div className = \"main\">\r\n      <div className = \"topBlock\">\r\n        {'Cute Cat <3'}\r\n      </div>\r\n      <div className = 'listBlock'>\r\n        <InfiniteList/>\r\n      </div>\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}